function pickRandom(e){return e[Math.floor(Math.random()*e.length)]}function practice(){new Vue({el:"#pracice",data:data,getAnswer:function(e,t){var n=_.find(this.data.wordsets,{name:e});return _.find(n.words,{_id:t})},pickSentences:function(e){var t=[];for(i=0;i<e;i++)t.push(pickRandom(data.sentences));return t}})}function sentences(){data.forEach(function(e){$("#sentence-list").prepend(template(e))});new Vue({el:"#sentences",data:data})}$(document).on("click",".sentence-delete",function(){var e=$(this).parent().parent(),t=e.attr("_id");$.post("/sentences/delete",{_id:t},function(){e.remove()})}),$("#sentence-form").on("submit",function(){var e=$("#s_original").val(),t=$("#s_translation").val();return $.post("/sentences/add",{s_original:e,s_translation:t},function(n){n=JSON.parse(n),200===n.status?($("#sentence-list").prepend(template({s_original:e,s_translation:t,_id:n._id})),$("#s_original").val("").focus(),$("#s_translation").val("")):alert("Failed to add new sentence")}),!1}),$(document).on("click",".sentence-edit",function(){var e=$(this).parent().parent(),t=$(e).find(".word").text(),n=$(e).find(".translation").text();$("#word").val(t),$("#translation").val(n).focus()});var wordsets=new Vue({el:"#wordsets",data:{newWordsetName:null,wordsets:jsonData},methods:{editWordset:function(e){window.location.href="/wordset/"+e},deleteWordset:function(e){var t=this;console.log(this.wordsets),confirm("Are you sure you want to delete this wordset? This cannot be undone!")&&$.post("/wordsets/delete",{_id:e},function(){t.wordsets=t.wordsets.filter(function(t){return t._id!==e})})},addWordset:function(e){var t=this;$.post("/wordsets/add",{name:e},function(n){t.wordsets.push({_id:0,name:e,words:[]})})}}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
