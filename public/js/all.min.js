function pickRandom(t){return t[Math.floor(Math.random()*t.length)]}function wordsetPage(){return new Vue({el:"#wordset",data:{wordsetId:window.location.pathname.split("/")[2],word:null,translation:null,wordset:jsonData},methods:{addWord:function(){var t=this;$.post("/wordset/add",{_id:this.wordsetId,w:this.word,t:this.translation},function(o){if(o=JSON.parse(o),200===o.status){if(!1===o.replace)t.wordset.words.push({w:t.word,t:t.translation,_id:o._id});else{var e=_.find(t.wordset.words,{_id:o._id});e.w=t.word,e.t=t.translation}t.word=null,t.translation=null}else alert("Failed to add new word")})},editWord:function(t,o){this.word=t,this.translation=o},deleteWord:function(t){var o=this;console.log(t),$.post("/wordset/delete-word",{_id:this.wordsetId,wordId:t},function(e){e=JSON.parse(e),200===e.status?o.wordset.words=o.wordset.words.filter(function(o){return o._id!==t}):alert("Error removing word.")})}}})}function wordsetsPage(){return new Vue({el:"#wordsets",data:{newWordsetName:null,wordsets:jsonData},methods:{editWordset:function(t){window.location.href="/wordset/"+t},deleteWordset:function(t){var o=this;console.log(this.wordsets),confirm("Are you sure you want to delete this wordset? This cannot be undone!")&&$.post("/wordsets/delete",{_id:t},function(){o.wordsets=o.wordsets.filter(function(o){return o._id!==t})})},addWordset:function(t){var o=this;$.post("/wordsets/add",{name:t},function(e){o.wordsets.push({_id:0,name:t,words:[]})})}}})}var routes={wordsets:wordsetsPage,wordset:wordsetPage},currentRoute=window.location.pathname.split("/")[1],currVue=routes[currentRoute]();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
